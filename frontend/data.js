// 模拟数据 - 基于你的CSV结构
const newsData = [
    {
        "主题": "船舶减排技术",
        "生态区域": "北海",
        "污染来源": "船舶排放",
        "治理措施": "安装倾斜转子帆（风能推进）",
        "实施主体": "Norsepower、Sea-Cargo",
        "效果数据": "减少排放高达25%，每年节省超过100万升柴油"
    },
    {
        "主题": "深海采矿环境影响",
        "生态区域": "深海",
        "污染来源": "深海采矿",
        "治理措施": "进行全面环境评估、建立保护区、回收电池金属",
        "实施主体": "高级别海洋经济小组（Ocean Panel）",
        "效果数据": "无具体数据，但强调需要研究以防止物种损失"
    },
    {
        "主题": "集装箱丢失污染",
        "生态区域": "澳大利亚东南海岸",
        "污染来源": "丢失的集装箱（可能含有有害物质）",
        "治理措施": "搜索和回收丢失的集装箱、使用声纳搜索",
        "实施主体": "澳大利亚海事安全局（AMSA）、船东和保险公司",
        "效果数据": "已回收15个集装箱，35个仍缺失；保险公司承诺支付高达2250万美元"
    },
    {
        "主题": "环保船舶建造",
        "生态区域": "全球（船舶在北海运营）",
        "污染来源": "船舶排放",
        "治理措施": "使用锂离子电池系统、高效发动机、排放减少系统、空气润滑系统",
        "实施主体": "Finnlines、Nanjing Jinling船厂",
        "效果数据": "零排放操作在港口，减少燃料消耗和排放"
    },
    {
        "主题": "油轮减排技术",
        "生态区域": "北海",
        "污染来源": "油轮排放（VOC和CO2）",
        "治理措施": "使用VOC回收系统和LNG燃料系统",
        "实施主体": "Wärtsilä、KNOT",
        "效果数据": "减少CO2等效排放30-35%，每年至少减少30,000吨"
    },
    {
        "主题": "数字化促进可持续航运",
        "生态区域": "全球",
        "污染来源": "船舶运营",
        "治理措施": "使用AI和机器学习优化船舶性能、增强可持续操作",
        "实施主体": "DNV GL、ABB",
        "效果数据": "无具体数据，但旨在提高安全性和效率"
    },
    {
        "主题": "燃料高效油轮",
        "生态区域": "全球",
        "污染来源": "油轮排放",
        "治理措施": "使用Flettner转子、太阳能板、双燃料发动机",
        "实施主体": "Stena Bulk",
        "效果数据": "减少温室气体排放25%以上，潜在达45%"
    },
    {
        "主题": "生物燃料使用",
        "生态区域": "全球",
        "污染来源": "船舶燃料排放",
        "治理措施": "使用生物燃料（基于废弃物）",
        "实施主体": "Stena Bulk",
        "效果数据": "减少碳排放，基于试验证明技术可行性"
    },
    {
        "主题": "碳抵消",
        "生态区域": "美国内河（圣路易斯、孟菲斯等）",
        "污染来源": "柴油排放",
        "治理措施": "参与碳抵消计划实现碳中性",
        "实施主体": "SCF Marine Inc. (SEACOR Holdings)",
        "效果数据": "估计节省400万加仑柴油和40000公吨CO2"
    }
    // 你可以继续添加更多数据...
];

// 实际使用时，你可以用这个函数加载真实的CSV数据
function loadCSVData(csvText) {
    const lines = csvText.split('\n');
    const headers = lines[0].split(',');
    const data = [];
    
    for (let i = 1; i < lines.length; i++) {
        const line = lines[i].trim();
        if (line) {
            const values = line.split(',');
            const item = {};
            headers.forEach((header, index) => {
                item[header] = values[index] || '';
            });
            data.push(item);
        }
    }
    return data;
}